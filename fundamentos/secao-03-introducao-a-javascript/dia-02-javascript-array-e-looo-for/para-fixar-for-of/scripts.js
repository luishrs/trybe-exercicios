While
Voc√™ aprendeu a trabalhar com o loop for e agora sabe que, ao utiliz√°-lo, √© preciso informar a quantidade de itera√ß√µes que ele dever√° realizar. Mas o que acontece quando voc√™ n√£o sabe quantas vezes um loop deve se repetir? ü§î

Por exemplo, quando √© preciso descobrir se duas vari√°veis possuem o mesmo valor.

‚ö†Ô∏è Tenha muito cuidado! √â f√°cil causar loops infinitos utilizando o while!

Ao contr√°rio do for, o while executa a itera√ß√£o com apenas uma condi√ß√£o. Enquanto essa condi√ß√£o for verdadeira, o conte√∫do de escopo do while vai sendo cumprido e, ao encontrar uma condi√ß√£o falsa, o bloco √© encerrado. Por exemplo:

Copiar

let counter = 0;

while(counter !== 5) {
  counter += 1;
}
Nesse caso, o while ser√° executado at√© que a condi√ß√£o deixe de ser verdadeira, ou seja, at√© que a vari√°vel counter alcance o valor 5.

E se o valor inicial fosse 6, o que aconteceria?

Ele entraria em um loop infinito e poderia at√© travar o computador. Para evitar esse tipo de problema, √© importante se certificar do valor inicial atribu√≠do e da condi√ß√£o que ser√° avaliada como verdadeira dentro do while.

üí° Dica: Com o comando break √© poss√≠vel encerrar o loop while quando assim desejar. Veja um exemplo aqui.

Para o exerc√≠cio a seguir, simule um jogo com dois dados de seis lados. O objetivo √© rolar o segundo dado at√© que o n√∫mero sorteado seja igual ao do primeiro dado. Assim, utilize o c√≥digo Math.ceil(Math.random() * 6) para gerar um n√∫mero aleat√≥rio entre 01 e 06. N√£o se preocupe em entender como funciona o c√≥digo; por enquanto, √© importante entender apenas que, toda vez que o executar, um n√∫mero aleat√≥rio ser√° gerado.

Geralmente o while √© utilizado quando n√£o se sabe o in√≠cio e o fim do la√ßo, algo de que se tem pouco controle (at√© quando dever√° se repetir). Aqui, o objetivo √© que o n√∫mero da vari√°vel d1 seja igual ao n√∫mero armazenado na vari√°vel d2.